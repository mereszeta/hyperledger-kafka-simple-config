# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#


# NOTE: This is not the way a Kafka cluster would normally be deployed in production, as it is not secure
# and is not fault tolerant. This example is a toy deployment that is only meant to exercise the Kafka code path
# of the ordering service.

version: '2'

volumes:
  orderer1.example.com:
  orderer2.example.com:
  peer0.org1.example.com:
  peer1.org1.example.com:
  peer0.org2.example.com:
  peer1.org2.example.com:


networks:
  byfn:

services:


  orderer1.example.com:
    extends:
      file:   base/docker-compose-base.yaml
      service: orderer1.example.com
    container_name: orderer1.example.com
    networks:
      - byfn
    depends_on:
      - zookeeper1.example.com
      - zookeeper2.example.com
      - zookeeper3.example.com
      - kafka1.example.com
      - kafka2.example.com
      - kafka3.example.com
      - kafka4.example.com
  orderer2.example.com:
    extends:
      file:   base/docker-compose-base.yaml
      service: orderer2.example.com
    container_name: orderer2.example.com
    networks:
      - byfn
    depends_on:
          - zookeeper1.example.com
          - zookeeper2.example.com
          - zookeeper3.example.com
          - kafka1.example.com
          - kafka2.example.com
          - kafka3.example.com
          - kafka4.example.com

  peer0.org1.example.com:
    container_name: peer0.org1.example.com
    extends:
      file:  base/docker-compose-base.yaml
      service: peer0.org1.example.com
    networks:
      - byfn

  peer1.org1.example.com:
    container_name: peer1.org1.example.com
    extends:
      file:  base/docker-compose-base.yaml
      service: peer1.org1.example.com
    networks:
      - byfn

  peer0.org2.example.com:
    container_name: peer0.org2.example.com
    extends:
      file:  base/docker-compose-base.yaml
      service: peer0.org2.example.com
    networks:
      - byfn

  peer1.org2.example.com:
    container_name: peer1.org2.example.com
    extends:
      file:  base/docker-compose-base.yaml
      service: peer1.org2.example.com
    networks:
      - byfn

  cli:
    container_name: cli
    image: hyperledger/fabric-tools:$IMAGE_TAG
    tty: true
    stdin_open: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      #- FABRIC_LOGGING_SPEC=DEBUG
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash
    volumes:
        - /var/run/:/host/var/run/
        - ./../chaincode/:/opt/gopath/src/github.com/chaincode
        - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
        - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
        - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
    depends_on:
      - orderer1.example.com
      - orderer2.example.com
      - peer0.org1.example.com
      - peer1.org1.example.com
      - peer0.org2.example.com
      - peer1.org2.example.com
    networks:
      - byfn

  zookeeper1.example.com:
    container_name: zookeeper1.example.com
    image: hyperledger/fabric-zookeeper:$IMAGE_TAG
    environment:
      ZOO_MY_ID : 1
      ZOOKEEPER_TICK_TIME: 2000
      ZOO_SERVERS: server.1=zookeeper1.example.com:2888:3888 server.2=zookeeper2.example.com:2888:3888 server.3=zookeeper3.example.com:2888:3888
    networks:
    - byfn
    ports:
      - 12181:2181
      - 12888:2888
      - 13888:3888

  zookeeper2.example.com:
      container_name: zookeeper2.example.com
      image: hyperledger/fabric-zookeeper:$IMAGE_TAG
      environment:
        ZOO_MY_ID : 2
        ZOOKEEPER_TICK_TIME: 2000
        ZOO_SERVERS: server.1=zookeeper1.example.com:2888:3888 server.2=zookeeper2.example.com:2888:3888 server.3=zookeeper3.example.com:2888:3888
      networks:
      - byfn
      ports:
            - 22181:2181
            - 22888:2888
            - 23888:3888

  zookeeper3.example.com:
      container_name: zookeeper3.example.com
      image: hyperledger/fabric-zookeeper:$IMAGE_TAG
      environment:
        ZOO_MY_ID : 3
        ZOOKEEPER_TICK_TIME: 2000
        ZOO_SERVERS: server.1=zookeeper1.example.com:2888:3888 server.2=zookeeper2.example.com:2888:3888 server.3=zookeeper3.example.com:2888:3888
      ports:
                  - 32181:2181
                  - 32888:2888
                  - 33888:3888
      networks:
      - byfn

  kafka1.example.com:
    container_name: kafka1.example.com
    image: hyperledger/fabric-kafka:$IMAGE_TAG
    depends_on:
    - zookeeper1.example.com
    - zookeeper2.example.com
    - zookeeper3.example.com
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper1.example.com:2181,zookeeper2.example.com:2181,zookeeper3.example.com:2181
      - KAFKA_MESSAGE_MAX_BYTES=4194304 # 4 * 1024 * 1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=4194304 # 4 * 1024 * 1024 B
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_LOG_RETENTION_MS=-1
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
    networks:
    - byfn
    ports:
      - 19092:9092
      - 19093:9093

  kafka2.example.com:
    container_name: kafka2.example.com
    image: hyperledger/fabric-kafka:$IMAGE_TAG
    depends_on:
    - zookeeper1.example.com
    - zookeeper2.example.com
    - zookeeper3.example.com
    environment:
      - KAFKA_BROKER_ID=2
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper1.example.com:2181,zookeeper2.example.com:2181,zookeeper3.example.com:2181
      - KAFKA_MESSAGE_MAX_BYTES=4194304 # 4 * 1024 * 1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=4194304 # 4 * 1024 * 1024 B
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_LOG_RETENTION_MS=-1
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
    networks:
    - byfn
    ports:
      - 29092:9092
      - 29093:9093
  kafka3.example.com:
    container_name: kafka3.example.com
    image: hyperledger/fabric-kafka:$IMAGE_TAG
    depends_on:
    - zookeeper1.example.com
    - zookeeper2.example.com
    - zookeeper3.example.com
    environment:
      - KAFKA_BROKER_ID=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper1.example.com:2181,zookeeper2.example.com:2181,zookeeper3.example.com:2181
      - KAFKA_MESSAGE_MAX_BYTES=4194304 # 4 * 1024 * 1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=4194304 # 4 * 1024 * 1024 B
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_LOG_RETENTION_MS=-1
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
    networks:
    - byfn
    ports:
      - 39092:9092
      - 39093:9093
  kafka4.example.com:
    container_name: kafka4.example.com
    image: hyperledger/fabric-kafka:$IMAGE_TAG
    depends_on:
    - zookeeper1.example.com
    - zookeeper2.example.com
    - zookeeper3.example.com
    environment:
      - KAFKA_BROKER_ID=4
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper1.example.com:2181,zookeeper2.example.com:2181,zookeeper3.example.com:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka4.example.com:9092
      - KAFKA_MESSAGE_MAX_BYTES=4194304 # 4 * 1024 * 1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=4194304 # 4 * 1024 * 1024 B
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_LOG_RETENTION_MS=-1
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
    networks:
    - byfn
    ports:
      - 49092:9092
      - 49093:9093

